{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b9b9be52-2a76-450d-b6e3-ea78f04e2735",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['apple', 10], ['banana', 5], ['cherry', 10]]\n"
     ]
    }
   ],
   "source": [
    "orders=[['apple',10],['banana',5],['cherry',20]]\n",
    "\n",
    "for each in orders:\n",
    "    if each[0]==\"cherry\":\n",
    "        each[1]=10 \n",
    "print(orders)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c2b8693b-0257-4968-b338-365486430feb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20, 3]\n",
      "23\n"
     ]
    }
   ],
   "source": [
    "order=[['axe',20],['ball',40],['cat',60],['desktop',44],['axe',3]]\n",
    "total=[]\n",
    "\n",
    "for each_item in order:\n",
    "    if each_item[0]==\"axe\":\n",
    "        total.append(each_item[1])\n",
    "print(total)\n",
    "print(sum(total))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9d93eb50-bf3c-4f9b-8dc4-b081517f1f50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 4, 8, 'A', 5.2)\n",
      "<class 'tuple'>\n"
     ]
    }
   ],
   "source": [
    "#Tuples \n",
    "tup_1=(3,4,8,'A',5.2)\n",
    "tup_2=\"Hello\",5,10,20\n",
    "tup_3=tuple([1,2,5,7.5]) \n",
    "print(tup_1) \n",
    "print(type(tup_1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "367b25aa-5441-4fac-b724-f414e0115bd5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Hello', 5, 10, 20)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Slice the tuple \n",
    "tup_2[0:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5e66b0b8-dde0-47e1-ac34-5920fe704b90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#use index()method to find the index value \n",
    "\n",
    "tup_1.index('A')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2346674d-661c-46b7-8727-fd8bc0385d71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#use count() method of tuple\n",
    "\n",
    "tuple=(20,23,3,23,19,22,29,71,23,20,89)\n",
    "tuple.count(23)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3b6d3eb5-f64a-4326-a98a-bb498b8f9155",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'a': 1, 'b': 2, 'c': 3}\n",
      "<class 'dict'>\n"
     ]
    }
   ],
   "source": [
    "#create dictionary using curly brackets {} \n",
    "\n",
    "d1={\"a\":1,\"b\":2,\"c\":3} \n",
    "print(d1) \n",
    "print(type(d1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e06ea4ad-e0b7-4440-a866-4967d564a4ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'a': 10, 'b': 22, 'c': 30}\n"
     ]
    }
   ],
   "source": [
    "d2=dict(a=10,b=22,c=30) \n",
    "print(d2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc77da4d-a338-49d6-bab2-b2aad34650a3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:anaconda3]",
   "language": "python",
   "name": "conda-env-anaconda3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
